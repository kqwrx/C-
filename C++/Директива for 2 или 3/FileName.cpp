#include <iostream>  
#include <cmath>     
#include <omp.h>     // Подключение библиотеки OpenMP для параллельных вычислений


// Функция проверки числа на простоту
bool prime(int n)
{
    if (n == 1) return false;        // 1 не является простым числом
    if (n % 2 == 0) return n == 2;   // Если число четное, то оно простое только если это 2
    for (int i = 3; i * i <= n; i += 2)  // Проверяем делители от 3 до корня из n с шагом 2
        if (n % i == 0) return false;    // Если найден делитель, число не простое
    return true;                     // Если делителей нет, число простое
}

// Функция подсчета количества простых чисел до n
int prime_numbers(int n)
{
    if (n < 2) return 0;  // Если n меньше 2, простых чисел нет (0 и 1 не считаются)
    int count = 1;         // Начинаем счет с 1, учитывая число 2 (единственное четное простое)

#pragma omp parallel  // Начало параллельной области (создает группу потоков)
    {
        // Распараллеливаем цикл for с редукцией по переменной count
#pragma omp parallel for reduction(+:count) schedule(dynamic, 100)
        for (int i = 3; i <= n; i += 2)  // Перебираем нечетные числа от 3 до n
        {
            if (prime(i)) count++;  // Если число простое, увеличиваем счетчик
        }
    }

    return count;  // Возвращаем общее количество простых чисел
}

// Главная функция программы
int main()
{
    int n;  // Объявление переменной для верхней границы поиска
    std::cout << "Enter n: ";  // Вывод приглашения для ввода
    std::cin >> n;             // Считывание значения n с клавиатуры
    int result = prime_numbers(n);  // Вызов функции подсчета простых чисел
    // Вывод результата
    std::cout << "number prime numbers from 1 to " << n << ": " << result << std::endl;
    return 0;  // Завершение программы с кодом 0 (успех)
}